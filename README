


Discussion:
http://prompt.im/SemanticBookmarks


Heroku hosted demo:
http://semantic-bookmarks.heroku.com/


# Back End Structure
==================================================

/
returns the basic html template (the front end)
if user isn’t logged it, we redirect her to /alpha

/api/help
lists all of the API methods?

/alpha
	we redirect all univited traffic there for now.
	We return a static page where user can sign-up for invitation.
	Login options (for alpha-users that have been logged out).


/api/v1/add/:myEscapedUrl
If not already on file, add the URL to the database
	- fetch site (curl)
	- make a screengrab (yotta Snap?)
	- generate metada (title tag, rss, etc)
	- generate indexed content (all words on page…)
	- run more scripts to add more metadata (AI)
Add the site URL to user’s bookmark collection.
	(for existing sites, that’s the only thing we need to do)














# Front End
===========================================
## Routes (sammy JS)


GET ROUTES /actual page changes
-----------------------------------------
* #/   loads the basic JSON content from the server
			If the client is logged in, his bookmarks, otherwise, the welcome message inviting him to start importing (or adding bookmarks) directly, or to expore the interface (viewing popular bookmarks, or an interesting category, to feature the classification quality)

#/settings
	triggers the visibility of the “settings” section, and loads user settings from the server (using json).

#/signup
	if not logged-in, displays the sign-up options section (only an email field + password, and facebook connect)


#/site/:domain  //ie. #/site/mydomain.com
	triggers the visibility of the “site-info” section
	update the data in the template (with the one we have already: title: desc)
	Load the full details of the site (popular sections it belongs to, tests runned on the site, options to change site metadata (categories)).



POST ROUTES / silently accessed to trigger application state.
-----------------------------------
#/login
	triggers login box to appear

#/submit-q/
	(triggered when the main field (#q) is submitted)
	this function check if the field is containing a URL, call “add” event with it.
if not it means it’s keyword, and we trigger “filter”event  (filtering the on-page results) and “search” (querry the server for related sites and refine the search results, using the indexed content, parent categories, and AI.)



Events:
-----------------------------------------------------
 “filter-entries” (str, [params])
	Only filter the screen with what existing content.
	params: 
		the sorting (asc/desc, date, relv, populrity)
		
“add-url” (url)
	querry the api with the URL: /api/v1/add/myEscapedUrl
	at he same time, add the element to the DOM (yellow fade), and attach the json callback to this element (so the actual database content is loaded in this template once ready).

“remove-url” (url)
	query the API with the url to remove
	remove element from the dom






